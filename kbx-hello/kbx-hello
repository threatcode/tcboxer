#! /usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
import urllib.request
from prompt_toolkit import prompt
import sys
import re
import os

def server(args):
    httpd = HTTPServer(('localhost', args.port), RequestHandler)
    httpd.serve_forever()

def fetch_data(args):
    req = urllib.request.urlopen('http://localhost:'+str(args.port))
    data = req.read().decode('utf-8')
    return data

def gui(args):
    import gi
    gi.require_version('Gtk', '3.0')
    from gi.repository import Gtk, GObject, GLib

    class Hello(Gtk.Dialog):
        def __init__(self):
            Gtk.Dialog.__init__(self, 'Hello', None, 0, (Gtk.STOCK_OK, Gtk.ResponseType.OK))

            self.set_default_response(Gtk.ResponseType.OK)
            self.set_size_request(700, 200)
            vbox = self.get_content_area()
            self.label = Gtk.Label()
            vbox.pack_start(self.label, True, True, 0)
            self.refresh_data()
            self.but = Gtk.Button(label='Refresh')
            vbox.pack_start(self.but, True, True, 0)
            self.but.connect('clicked',self.refresh_data)

        def refresh_data(self, _=''):
            self.label.set_text(fetch_data(args))

    h = Hello()
    h.show_all()
    h.present()
    response = h.run()

def cli(args):
    c = ""
    while c != "exit":
        try:
            c = prompt("fetch | save <value> | delete ? ")
            if c == "exit":
                sys.exit()
        except EOFError:
            sys.exit()
        if c == "fetch":
            print ("Server returned: "+fetch_data(args))
        elif c == "delete":
            try:
                os.unlink(args.path)
                print ("File deleted")
            except:
                print ("Error deleting file")
        elif re.match('save ',c):
            contents = c[5:]
            try:
                with open(args.path,'w') as f:
                    f.write(contents+'\n')
                print ("File saved")
            except:
                print ("Error saving file")
        else:
            print ("What?")

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        global args
        self.send_response(200)
        self.end_headers()
        l = ''
        try:
            with open(args.path) as f:
                d = f.read().strip()
        except:
            d = "Error reading file"
        self.wfile.write(bytes(str(d),'utf-8'))

parser = argparse.ArgumentParser()
parser.add_argument('--verbose', '-v', action='count')
parser.add_argument('--port', '-p', type=int, help='port to use', default='8765')
parser.add_argument('--path', '-P', help='path to file', default='/tmp/kbx-hello.txt')

subparsers = parser.add_subparsers(help='action to perform', dest='action')
subparsers.required = True
parser_server = subparsers.add_parser('server', help='run as server')
parser_server.set_defaults(func=server)
parser_gui = subparsers.add_parser('gui', help='GUI client')
parser_gui.set_defaults(func=gui)
parser_cli = subparsers.add_parser('cli', help='CLI client')
parser_cli.set_defaults(func=cli)

args = parser.parse_args()
# print(args)
args.func(args)
